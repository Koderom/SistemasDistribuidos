/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Views;

import BatallaEvents.BatallaListener;
import ClienteSocket.ClienteTCP;
import ViewEvents.ConnectedEvent;
import ViewEvents.CrearTableroEvent;
import ViewEvents.ReconnectedEvent;
import ViewEvents.ResultadoDisparoEvent;
import ViewEvents.SalaEsperaEvent;
import ViewEvents.EmpezarBatallaEvent;
import ViewEvents.TryConnectionEvent;
import ViewEvents.ViewListener;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.HashMap;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.Timer;
import javax.swing.event.EventListenerList;
import utils.Parse;

/**
 *
 * @author MIRKO
 */
public class MainForm extends javax.swing.JFrame implements ViewListener{
    ClienteTCP cliente;
    /**
     * Creates new form Main
     */
    Timer timer = this.getTimer();
    int tictac = 0;
    char tipo;
    public MainForm() {
        initComponents();
        cliente = new ClienteTCP("127.0.0.1", 5000);
        cliente.addSocketListener(this);
    }
    
    public String registrarUsuario(String nick, String password){
        String respuesta = this.cliente.registrarUsuario(nick, password);
        HashMap<String, String> info = (HashMap<String, String>) Parse.convertMessageToInfo(respuesta);
        if(info.containsKey("COD") && info.get("COD").equals("200")){
            this.cliente.setNick(nick);
            this.cliente.startReadingMessage();
        }
        return respuesta;
    }
    
    public String loggearUsuario(String nick, String password){
        String respuesta = this.cliente.loggearUsuario(nick, password);
        HashMap<String, String> info = (HashMap<String, String>) Parse.convertMessageToInfo(respuesta);
        
        if(info.containsKey("COD") && info.get("COD").equals("200")){
            this.cliente.setNick(nick);
            this.cliente.startReadingMessage();
        }
        System.out.println(respuesta);
        return respuesta;
    }
    public void loginExitoso(){
        user_name.setText("Usuario logueado : "+this.cliente.nick);
        mensaje.setText("Logueado exitosamente");
        boton_iniciar_partida.setEnabled(true);
    }
    public void colocarBarco(int fil, int col, int size, char orientacion){
        this.cliente.colocarBarco(fil, col, size, orientacion);
    }
    public void entrarSalaEspera(){
        this.cliente.entrarSalaEspera();
    }
    public void dispararA(int contrincante_session_id, int fila, int columna){
//        this.cliente.dispararA(contrincante_session_id, fila, columna);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        user_name = new javax.swing.JLabel();
        mensaje = new javax.swing.JLabel();
        boton_iniciar_partida = new javax.swing.JButton();
        fondo_app = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(600, 338));
        setResizable(false);
        setSize(new java.awt.Dimension(600, 338));

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        user_name.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.add(user_name, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 250, 20));

        mensaje.setBackground(new java.awt.Color(51, 51, 51));
        mensaje.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        mensaje.setForeground(new java.awt.Color(255, 204, 0));
        jPanel1.add(mensaje, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 250, 20));

        boton_iniciar_partida.setText("Iniciar partida");
        boton_iniciar_partida.setDisplayedMnemonicIndex(1);
        boton_iniciar_partida.setEnabled(false);
        boton_iniciar_partida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton_iniciar_partidaActionPerformed(evt);
            }
        });
        jPanel1.add(boton_iniciar_partida, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 230, -1, -1));

        fondo_app.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/fondo_principal.gif"))); // NOI18N
        jPanel1.add(fondo_app, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void boton_iniciar_partidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton_iniciar_partidaActionPerformed
        this.cliente.crearTablero();
    }//GEN-LAST:event_boton_iniciar_partidaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }

    
    private Timer getTimer(){
        return new Timer(500, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if(tipo == 'C') animacionTryConnect();
                if(tictac < 4)tictac++;
                else tictac = 0;
            }
        });
    }
    private void animacionTryConnect(){
        if(tictac == 0 )mensaje.setText("Intentando contectar al servidor");
        else mensaje.setText(mensaje.getText()+" . ");
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton boton_iniciar_partida;
    private javax.swing.JLabel fondo_app;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel mensaje;
    private javax.swing.JLabel user_name;
    // End of variables declaration//GEN-END:variables

    @Override
    public void onConnected(ConnectedEvent event) {
        timer.stop();
        this.mensaje.setText("conectado al servidor");
        mensaje.setForeground(Color.GREEN);
        
        LoginView registro = new LoginView(this, false);
        registro.setVisible(true);
    }

    @Override
    public void onReconnected(ReconnectedEvent event) {
        timer.stop();
        String respuesta = this.cliente.reconectar();
        HashMap<String, String> info = (HashMap<String, String>) Parse.convertMessageToInfo(respuesta);
        this.mensaje.setText(info.get("MSJ"));
        mensaje.setForeground(Color.GREEN);
        
        this.cliente.startReadingMessage();
    }
    
    @Override
    public void onTryConnection(TryConnectionEvent event) {
        this.tipo = 'C';
        this.tictac = 0;
        mensaje.setForeground(Color.YELLOW);
        
        if(timer.isRepeats() || timer.isRunning()) timer.restart();
        else timer.start();
    }
    @Override
    public void onCrearTablero(CrearTableroEvent event) {
        int dim = event.getDimencion();
        CrearTablero crearTablero = new CrearTablero(this, false,cliente, dim);
        crearTablero.setTitle("Tablero de " + cliente.nick);
        this.setVisible(false);
        crearTablero.setVisible(true);
    }

    @Override
    public void onEmpezarBatalla(EmpezarBatallaEvent event) {
        boton_iniciar_partida.setEnabled(false);
        System.out.println("comienza la batalla");
    }

    @Override
    public void onSalaEspera(SalaEsperaEvent event) {
        
    }

    @Override
    public void onResultadoDisparo(ResultadoDisparoEvent event) {
        
    }
    /*------------------------------------------------------------------------*/
    protected EventListenerList listenerList = new EventListenerList();
    
    public void addBatallaListener(BatallaListener listener){
        listenerList.add(BatallaListener.class, listener);
    }
    public void removeBatallaListener(BatallaListener listener){
        listenerList.remove(BatallaListener.class, listener);
    }
    public void notifyResultadoDisparoEvent(BatallaEvents.ResultadoDisparoEvent event){
        Object[] listeners = listenerList.getListenerList();
        for (int i = 0; i < listeners.length; i = i + 2) {
            if(listeners[i] == BatallaListener.class){
                ((BatallaListener) listeners[i+1]).onResultadoDisparo(event);
            }
        }
    }
    
}
